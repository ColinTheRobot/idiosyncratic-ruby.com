<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Idiosyncratic Ruby</title>
  <subtitle>A 31 Parts Story about Ruby Specialities. A New Post Every Day in May 2015!</subtitle>
  <id>http://idiosyncratic-ruby.com/index/</id>
  <link href="http://idiosyncratic-ruby.com/index/"/>
  <link href="https://feeds.feedburner.com/IdiosyncraticRuby" rel="self"/>
  <updated>2015-05-12T02:00:00+02:00</updated>
  <author>
    <name>Jan Lelis</name>
  </author>
  <entry>
    <title>More Inspections</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/12-more-inspections.html"/>
    <id>http://idiosyncratic-ruby.com/12-more-inspections.html</id>
    <published>2015-05-12T02:00:00+02:00</published>
    <updated>2015-05-12T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;Some of IRB's command-line options can be called idiosyncratic as well. Take &lt;em&gt;math mode&lt;/em&gt; as an example: It will require the infamous &lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/mathn.rb"&gt;mathn&lt;/a&gt; library on start up:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ irb -m
&amp;gt;&amp;gt; Math #=&amp;gt; CMath
&amp;gt;&amp;gt; 3/2 #=&amp;gt; (3/2)
&amp;gt;&amp;gt; !!defined?(Vector) #=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And another one surprised me: You can pass custom &lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/irb/inspector.rb"&gt;inspectors&lt;/a&gt; to IRB, for example, &lt;em&gt;yaml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ irb -f --inspect yaml
&amp;gt;&amp;gt; [1,2,3]
=&amp;gt; ---
- 1
- 2
- 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or &lt;em&gt;marshal&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ irb -f --inspect marshal
&amp;gt;&amp;gt; 42
=&amp;gt; i/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you can also define &lt;em&gt;your own inspectors on the fly&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ irb -f --inspect "{ |r| r.to_s.reverse }"
&amp;gt;&amp;gt; [1,2,3]
=&amp;gt; ]3 ,2 ,1[
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will be eval'd (!) as the block part of a new &lt;code&gt;proc&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;man irb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/ruby/ruby/blame/trunk/lib/irb/context.rb"&gt;Source: irb/context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/irb/inspector.rb"&gt;Source: irb/inspectors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Regular Extremism</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/11-regular-extremism.html"/>
    <id>http://idiosyncratic-ruby.com/11-regular-extremism.html</id>
    <published>2015-05-11T02:00:00+02:00</published>
    <updated>2015-05-11T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;You are here for a collection of 10 advanced features of regular expressions in Ruby!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="regex-conditionals"&gt;Regex Conditionals&lt;/h2&gt;

&lt;p&gt;Regular expressions can have embedded conditionals (&lt;em&gt;if-then-else&lt;/em&gt;) with &lt;code&gt;(?ref)then|else&lt;/code&gt;. "ref" stands for a group reference (number or name of a capture group):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# will match everything if string contains "ä", or only match first two chars
regex = /(?=(.*ä))?(?(1).*|..)/

"Ruby"[regex] #=&amp;gt; "Ru"
"Idiosyncrätic"[regex] #=&amp;gt; "Idiosyncrätic"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="keep-expressions"&gt;Keep Expressions&lt;/h2&gt;

&lt;p&gt;The possible ways to &lt;a href="http://www.regular-expressions.info/lookaround.html"&gt;look around&lt;/a&gt; within a regex are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Syntax&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;(?=X)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Positive lookahead&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;"Ruby"[/.(?=b)/]    #=&amp;gt; "u"&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;(?!X)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Negative lookahead&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;"Ruby"[/.(?!u)/]    #=&amp;gt; "u"&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;(?&amp;lt;=X)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Positive lookbehind&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;"Ruby"[/(?&amp;lt;=u)./]   #=&amp;gt; "b"&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;(?&amp;lt;!X)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Negative lookbehind&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;"Ruby"[/(?&amp;lt;!R|^)./] #=&amp;gt; "b"&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;But Ruby also has "Keep Expressions", an additional shortcut syntax to do &lt;em&gt;positive lookbehinds&lt;/em&gt; using &lt;code&gt;\K&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Ruby"[/Ru\Kby/] #=&amp;gt; "by"
"Ruby"[/ru\Kby/] #=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="character-class-intersections"&gt;Character Class Intersections&lt;/h2&gt;

&lt;p&gt;You can nest character classes and AND-connect them with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. Matching all non-vowels here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncratic".scan /[[a-z]&amp;amp;&amp;amp;[^aeiou]]+/
# =&amp;gt; ["d", "syncr", "t", "c"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="regex-sub-expressions"&gt;Regex Sub-Expressions&lt;/h2&gt;

&lt;p&gt;You can recursively apply regex groups again with &lt;code&gt;\g&amp;lt;ref&amp;gt;&lt;/code&gt;. "ref" stands for a group reference (number or name of a capture group). This is different from back-references (&lt;code&gt;\1&lt;/code&gt; .. &lt;code&gt;\9&lt;/code&gt;), which will re-match the already matched string, instead of executing the regex again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# match any number of sequences of 3 identical chars
regex = /((.)\2{2})\g&amp;lt;1&amp;gt;*/
"aaa"[regex] #=&amp;gt; "aaa"
"abc"[regex] #=&amp;gt; nil
"aaab"[regex] #=&amp;gt; "aaa"
"aaabbb"[regex] #=&amp;gt; "aaabbb"
"aaabbbc"[regex] #=&amp;gt; "aaabbb"
"aaabbbccc"[regex] #=&amp;gt; "aaabbbccc"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="match-characters-that-belong-together"&gt;Match Characters that Belong Together&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;\X&lt;/code&gt; treats combined characters as a single character. See &lt;a href="http://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries"&gt;grapheme clusters&lt;/a&gt; for more information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string = "R\u{030A}uby"
string[/./] #=&amp;gt; "R"
string[/.../] #=&amp;gt; "R̊u"
string[/\X\X/] #=&amp;gt; "R̊u"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="relative-back-references"&gt;Relative Back-References&lt;/h2&gt;

&lt;p&gt;Back-refs can be relatively referenced from the current position via &lt;code&gt;\k&amp;lt;-n&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Ruby by"[/(R)(u)(by) \k&amp;lt;-1&amp;gt;/] #=&amp;gt; "Ruby by"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="deactivate-backtracking"&gt;Deactivate Backtracking&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://www.regular-expressions.info/atomic.html"&gt;Atomic groups&lt;/a&gt;, defined via &lt;code&gt;(?&amp;gt;X)&lt;/code&gt;, will always try to match the first of all alternatives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Rüby"[/R(u*|ü)by/]   #=&amp;gt; "Rüby"
"Rüby"[/R(?&amp;gt;u*|ü)by/] #=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="turn-on-unicode-matching-for-w-d-s-and-b"&gt;Turn On Unicode-Matching for &lt;code&gt;\w&lt;/code&gt;, &lt;code&gt;\d&lt;/code&gt;, &lt;code&gt;\s&lt;/code&gt;, and &lt;code&gt;\b&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;"Rüby"[/\w*/] #=&amp;gt; "R"
"Rüby"[/(?u)\w*/] #=&amp;gt; "Rüby"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="continue-matching-at-last-match-position"&gt;Continue Matching at Last Match Position&lt;/h2&gt;

&lt;p&gt;When using a method that matches a regex multiple times against a string (like &lt;code&gt;String#gsub&lt;/code&gt; or &lt;code&gt;String#scan&lt;/code&gt;), you can reference the position of the last match via &lt;code&gt;\G&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"abc1abc22abc333".scan /\Gabc./ # =&amp;gt; ["abc1", "abc2"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="stringsplit-with-capture-groups"&gt;&lt;code&gt;String#split&lt;/code&gt; with Capture Groups&lt;/h2&gt;

&lt;p&gt;The normal way of using &lt;code&gt;String#split&lt;/code&gt; is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"0-0".split(/-/) #=&amp;gt; ["0", "0"]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if you want to make your code as hard to read as possible, remember that captured groups will be added to the resulting array:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"0-0".split(/(-)/) #=&amp;gt; ["0", "-", "0"]
"0-0".split(/-(?=(.))/) #=&amp;gt; ["0", "0", "0"]
"0-0".split(/(((-)))/) #=&amp;gt; ["0", "-", "-", "-", "0"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Regexp.html"&gt;RDoc: Regexp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/k-takata/Onigmo/blob/master/doc/RE"&gt;Onigmo Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Know your Environment</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/10-know-your-environment.html"/>
    <id>http://idiosyncratic-ruby.com/10-know-your-environment.html</id>
    <published>2015-05-10T02:00:00+02:00</published>
    <updated>2015-05-10T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;Ruby's &lt;a href="http://ruby-doc.org/core-2.2.2/ENV.html"&gt;ENV object&lt;/a&gt; gives you accss to &lt;a href="http://en.wikipedia.org/wiki/Environment_variable"&gt;enviroment variables&lt;/a&gt;. It looks like normal &lt;a href="http://ruby-doc.org/core-2.2.2/Hash.html"&gt;Ruby hash&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENV["TERM"] #=&amp;gt; "xterm"
ENV["SOMETHING"] = "NEW" #=&amp;gt; "NEW"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this is only the surface. Turns out &lt;code&gt;ENV&lt;/code&gt; is a &lt;em&gt;special object&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENV.class #=&amp;gt; Object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is hash-like, but lacks some functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENV.flatten # NoMethodError
ENV.default = "MyNullObject" # NoMethodError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides this, it behaves like an ordinary hash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENV["my_value"] = "something"
ENV[42] = "oops" # not quite: TypeError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another thing that is missing: Merging the &lt;code&gt;ENV&lt;/code&gt; hash with another hash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENV.merge(Idiosyncratic: "YES") # NoMethodError
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/ruby/ruby/blob/trunk/hash.c"&gt;Source: ENV&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rubinius/rubinius/blob/master/kernel/common/env.rb"&gt;Rubinius Source: ENV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Globalization</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/9-globalization.html"/>
    <id>http://idiosyncratic-ruby.com/9-globalization.html</id>
    <published>2015-05-09T02:00:00+02:00</published>
    <updated>2015-05-09T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;This is an overview of all the special, two-letter global variables in Ruby, which Ruby &lt;a href="http://www.perlmonks.org/?node_id=353259"&gt;inherited from Perl&lt;/a&gt;. For the purpose of improving code readability, Ruby comes with &lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/English.rb"&gt;English.rb&lt;/a&gt; in its standard library, which provides non-cryptic aliases and explainations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="types-of-global-variables"&gt;Types of Global Variables&lt;/h2&gt;

&lt;table class="table-20-X"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Scope&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;Real Global variable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;thread&lt;/td&gt;
      &lt;td&gt;Thread-global variable: Can have different values in different threads&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pseudo&lt;/td&gt;
      &lt;td&gt;Looks like a global variable, but is a local variable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;defunct&lt;/td&gt;
      &lt;td&gt;Not working (anymore)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;read-only&lt;/td&gt;
      &lt;td&gt;Variable cannot be set to a new value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(read-only)&lt;/td&gt;
      &lt;td&gt;Variable cannot be set to a new value, but is an array that is mutable&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Not all special global variabales are global. This is definitely idiosyncratic.&lt;/p&gt;

&lt;h2 id="list-of-all-two-letter-global-variables"&gt;List of All Two-Letter Global Variables&lt;/h2&gt;

&lt;table class="table-15-20-40-15-X"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Perlish&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;English&lt;/th&gt;
      &lt;th&gt;Short&lt;/th&gt;
      &lt;th&gt;Info&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$!&lt;/td&gt;
      &lt;td&gt;thread&lt;/td&gt;
      &lt;td&gt;$ERROR_INFO&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Exception.html"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$@&lt;/td&gt;
      &lt;td&gt;thread&lt;/td&gt;
      &lt;td&gt;$ERROR_POSITION&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Exception.html"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$;&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;$FIELD_SEPARATOR&lt;/td&gt;
      &lt;td&gt;$FS, $-F¹&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/String.html#method-i-split"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$,&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;$OUTPUT_FIELD_SEPARATOR&lt;/td&gt;
      &lt;td&gt;$OFS&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/IO.html#method-i-print"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$/&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;$INPUT_RECORD_SEPARATOR&lt;/td&gt;
      &lt;td&gt;$RS, $-0¹&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/IO.html#method-i-gets"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$\&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;$OUTPUT_RECORD_SEPARATOR&lt;/td&gt;
      &lt;td&gt;$ORS&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/IO.html#method-i-print"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$.&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;$INPUT_LINE_NUMBER&lt;/td&gt;
      &lt;td&gt;$NR&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/IO.html#method-i-lineno"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$_&lt;/td&gt;
      &lt;td&gt;pseudo&lt;/td&gt;
      &lt;td&gt;$LAST_READ_LINE&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/IO.html#method-i-gets"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&amp;gt;&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;$DEFAULT_OUTPUT&lt;/td&gt;
      &lt;td&gt;$stdout¹&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://robots.thoughtbot.com/io-in-ruby"&gt;Article&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&amp;lt;&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;$DEFAULT_INPUT&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://www.rubydoc.info/stdlib/core/ARGF"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$$&lt;/td&gt;
      &lt;td&gt;read-only&lt;/td&gt;
      &lt;td&gt;$PROCESS_ID&lt;/td&gt;
      &lt;td&gt;$PID&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://allenlsy.com/working-with-unix-process-in-ruby/"&gt;Article&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$?&lt;/td&gt;
      &lt;td&gt;thread / read-only&lt;/td&gt;
      &lt;td&gt;$CHILD_STATUS&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Process.html#method-c-wait"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$~&lt;/td&gt;
      &lt;td&gt;pseudo&lt;/td&gt;
      &lt;td&gt;$LAST_MATCH_INFO&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Regexp.html#class-Regexp-label-Special+global+variables"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$=&lt;/td&gt;
      &lt;td&gt;defunct&lt;/td&gt;
      &lt;td&gt;$IGNORECASE&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$*&lt;/td&gt;
      &lt;td&gt;(read-only)&lt;/td&gt;
      &lt;td&gt;$ARGV&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://jnoconor.github.io/blog/2013/10/13/a-short-explanation-of-argv/"&gt;Article&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&amp;amp;&lt;/td&gt;
      &lt;td&gt;pseudo / read-only&lt;/td&gt;
      &lt;td&gt;$MATCH&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Regexp.html#class-Regexp-label-Special+global+variables"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$`&lt;/td&gt;
      &lt;td&gt;pseudo / read-only&lt;/td&gt;
      &lt;td&gt;$PREMATCH&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Regexp.html#class-Regexp-label-Special+global+variables"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$'&lt;/td&gt;
      &lt;td&gt;pseudo / read-only&lt;/td&gt;
      &lt;td&gt;$POSTMATCH&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Regexp.html#class-Regexp-label-Special+global+variables"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$+&lt;/td&gt;
      &lt;td&gt;pseudo / read-only&lt;/td&gt;
      &lt;td&gt;$LAST_PAREN_MATCH²&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Regexp.html#class-Regexp-label-Special+global+variables"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$:&lt;/td&gt;
      &lt;td&gt;(read-only)&lt;/td&gt;
      &lt;td&gt;$LOAD_PATH¹&lt;/td&gt;
      &lt;td&gt;$-I¹&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://selfless-singleton.rickwinfrey.com/2012/12/20/-rubys-load-path/"&gt;Article&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$"&lt;/td&gt;
      &lt;td&gt;(read-only)&lt;/td&gt;
      &lt;td&gt;$LOADED_FEATURES¹&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://ruby-hacking-guide.github.io/load.html"&gt;Article&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$0&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;$PROGRAM_NAME¹&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Process.html#method-c-argv0"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$1 - $9&lt;/td&gt;
      &lt;td&gt;pseudo&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Regexp.html#class-Regexp-label-Special+global+variables"&gt;RDoc&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$F³&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;&lt;a href="http://manpages.ubuntu.com/manpages/intrepid/man1/ruby.1.html#contenttoc4"&gt;Manpage&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;¹ Available without requiring English.rb&lt;br /&gt;
² No "T"&lt;br /&gt;
³ With command-line option &lt;code&gt;-a&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="translations"&gt;Translations&lt;/h2&gt;

&lt;p&gt;There are approaches to translate all variables to other languages, for example, to German. You will need &lt;a href="https://github.com/janlelis/Deutsch.rb/blob/master/lib/Deutsch.rb"&gt;Deutsch.rb&lt;/a&gt; to be able to use these:&lt;/p&gt;

&lt;table class="table-15-50-X"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Perlish&lt;/th&gt;
      &lt;th&gt;German&lt;/th&gt;
      &lt;th&gt;Short&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$!&lt;/td&gt;
      &lt;td&gt;$FEHLER_INFO&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$@&lt;/td&gt;
      &lt;td&gt;$FEHLER_POSITION&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$;&lt;/td&gt;
      &lt;td&gt;$FELD_TRENNER&lt;/td&gt;
      &lt;td&gt;$FT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$,&lt;/td&gt;
      &lt;td&gt;$AUSGABE_FELD_TRENNER&lt;/td&gt;
      &lt;td&gt;$AFT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$/&lt;/td&gt;
      &lt;td&gt;$EINGABE_DATENSATZ_TRENNER&lt;/td&gt;
      &lt;td&gt;$DT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$\&lt;/td&gt;
      &lt;td&gt;$AUSGABE_DATENSATZ_TRENNER&lt;/td&gt;
      &lt;td&gt;$ADT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$.&lt;/td&gt;
      &lt;td&gt;$EINGABE_ZEILEN_NUMMER&lt;/td&gt;
      &lt;td&gt;$NR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$_&lt;/td&gt;
      &lt;td&gt;$ZULETZT_GELESENE_ZEILE&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&amp;gt;&lt;/td&gt;
      &lt;td&gt;$STANDARD_AUSGABE&lt;/td&gt;
      &lt;td&gt;$stdraus&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&amp;lt;&lt;/td&gt;
      &lt;td&gt;$STANDARD_EINGABE&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$$&lt;/td&gt;
      &lt;td&gt;$PROZESS_ID&lt;/td&gt;
      &lt;td&gt;$PID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$?&lt;/td&gt;
      &lt;td&gt;$KIND_STATUS&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$~&lt;/td&gt;
      &lt;td&gt;$LETZTE_ÜBEREINSTIMMUNG&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$=&lt;/td&gt;
      &lt;td&gt;$IGNORIERE_SCHREIBUNG&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$*&lt;/td&gt;
      &lt;td&gt;$ARGV&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&amp;amp;&lt;/td&gt;
      &lt;td&gt;$ÜBEREINSTIMMUNG&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$`&lt;/td&gt;
      &lt;td&gt;$VORÜBEREINSTIMMUNG&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$'&lt;/td&gt;
      &lt;td&gt;$NACHÜBEREINSTIMMUNG&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$+&lt;/td&gt;
      &lt;td&gt;$LETZTE_ELTERN_ÜBEREINSTIMMUNG&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$:&lt;/td&gt;
      &lt;td&gt;$LADE_PFAD&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$"&lt;/td&gt;
      &lt;td&gt;$GELADENE_FUNKTIONALITÄTEN&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$0&lt;/td&gt;
      &lt;td&gt;$PROGRAMM_NAME&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Feel free to &lt;a href="https://github.com/janlelis/idiosyncratic-ruby.com/pulls"&gt;open a new pull request&lt;/a&gt; for more languages.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Self Improvement</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/8-self-improvement.html"/>
    <id>http://idiosyncratic-ruby.com/8-self-improvement.html</id>
    <published>2015-05-08T02:00:00+02:00</published>
    <updated>2015-05-08T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;One of the never-ending style battles in Ruby land is &lt;code&gt;module_function&lt;/code&gt; vs &lt;code&gt;extend self&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Both enable you to define module methods, which can be called not only from instance level, but also from class level. This enables you to make modules that can optionally be &lt;code&gt;include&lt;/code&gt;'d into your current scope, which makes sense if the module contains non-state changing methods ("functions"). Not having to prepend the module name every time you use the functions saves time and looks good:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# class level
Mathematics.calc # =&amp;gt; 42

# instance level
include Mathematics
calc # =&amp;gt; 42
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="modulefunction"&gt;&lt;code&gt;module_function&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;You can achieve this kind of functionality using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Mathematics
  module_function

  def calc
    42
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is very similar to writing this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Mathematics
  def self.calc
    42
  end

  private

  def calc
    42
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="reflection-observations"&gt;Reflection Observations&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Mathematics.instance_method(:calc).owner #=&amp;gt; Mathematics
Mathematics.public_method_defined?(:calc) #=&amp;gt; false
Mathematics.private_method_defined?(:calc) #=&amp;gt; true

Mathematics.method(:calc).owner #=&amp;gt; #&amp;lt;Class:Mathematics&amp;gt;
Mathematics.method(:calc).owner.singleton_class? #=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two things to take away from this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The method will be copied to class' singleton class&lt;/li&gt;
  &lt;li&gt;The instance method's visibility will become private&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="extend-self"&gt;&lt;code&gt;extend self&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;There is another way to get something very similar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Mathematics
  extend self

  def calc
    42
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;a href="http://ruby-doc.org/core-2.2.2/Object.html#method-i-extend"&gt;extend&lt;/a&gt;, the module will add its instance methods to the module's very own inheritance chain.&lt;/p&gt;

&lt;h3 id="reflection-observations-1"&gt;Reflection Observations&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Mathematics.instance_method(:calc).owner #=&amp;gt; Mathematics
Mathematics.public_method_defined?(:calc) #=&amp;gt; true
Mathematics.private_method_defined?(:calc) #=&amp;gt; false

Mathematics.method(:calc).owner #=&amp;gt; Mathematics
Mathematics.method(:calc).owner.singleton_class? #=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The differences to &lt;code&gt;module_function&lt;/code&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No method copying involved&lt;/li&gt;
  &lt;li&gt;No changes to method visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="which-one-to-use"&gt;Which One to Use?&lt;/h2&gt;

&lt;h3 id="advantages-of-extend-self"&gt;Advantages of &lt;code&gt;extend self&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;No method copying: If you want to modify a method's behavior via meta-programming, you only need to do this in one place&lt;/li&gt;
  &lt;li&gt;No side effects, like changing the method's visibility&lt;/li&gt;
  &lt;li&gt;It is no extra language feature&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="adavantages-of-modulefunction"&gt;Adavantages of &lt;code&gt;module_function&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The method name "module_function" describes what it does, so it might be better readable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://blog.rubybestpractices.com/posts/gregory/040-issue-10-uses-for-modules.html"&gt;Blog post on Ruby Best Practices about extend self&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://blog.rubybestpractices.com/posts/gregory/041-issue-10.5-uses-for-modules.html"&gt;Blog post on Ruby Best Practices about module_function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Easier Switching</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/7-easier-switching.html"/>
    <id>http://idiosyncratic-ruby.com/7-easier-switching.html</id>
    <published>2015-05-07T02:00:00+02:00</published>
    <updated>2015-05-07T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;There is a command-line switch to enable command-line switches:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="s"&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Enables some switch parsing for switches after script name but before
any file name arguments (or before a --).  Any switches found there
are removed from ARGV and set the corresponding variable in the script.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this context "corresponding variable" means &lt;em&gt;global variable&lt;/em&gt;. Let's see this in action (the &lt;code&gt;-e&lt;/code&gt; option is for executing the Ruby code that follows in a string):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -se 'p $option'
# nil

$ ruby -se 'p $option' -- -option
# true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="switching-files"&gt;Switching Files&lt;/h2&gt;

&lt;p&gt;You can add command-line options to the &lt;a href="http://en.wikipedia.org/wiki/Shebang_%28Unix%29"&gt;Ruby shebang line&lt;/a&gt;, which makes using the switch feature from the command-line more readable. Create a Ruby file (&lt;code&gt;switch.rb&lt;/code&gt;) and add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!ruby -s
p $option
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No you can call it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby switch.rb -option
# true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="caveats"&gt;Caveats!&lt;/h2&gt;

&lt;p&gt;You should be careful, not to trigger the wrong switches:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby switch.rb -LOAD_PATH
switch.rb: $LOAD_PATH is a read-only variable (NameError)

$ ruby switch.rb -0
switch.rb: no implicit conversion of true into String (TypeError)

$ ruby switch.rb -stdout
switch.rb: $stdout must have write method, TrueClass given (TypeError)

$ ruby switch.rb -SAFE
switch.rb: no implicit conversion of true into Integer (TypeError)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;man ruby&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Run Ruby, Run!</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/6-run-ruby-run.html"/>
    <id>http://idiosyncratic-ruby.com/6-run-ruby-run.html</id>
    <published>2015-05-06T02:00:00+02:00</published>
    <updated>2015-05-06T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;There is a one-liner on the internet that starts a local web server, for serving all the static files in your current directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python -m SimpleHTTPServer 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Or with Python 3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python3 -m http.server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rubyists generally do not want to rely on Python, so there is a Ruby equivalent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e httpd . -p 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will fire up a very simple server, written in Ruby, using &lt;a href="http://ruby-doc.org/stdlib-2.2.2/libdoc/webrick/rdoc/WEBrick.html"&gt;WEBrick&lt;/a&gt; under the hood!&lt;/p&gt;

&lt;p&gt;It also takes some more options, see at bottom of this post for a listing of available ones.&lt;/p&gt;

&lt;p&gt;How does this work and what does it do exactly? First of all, what does &lt;code&gt;ruby -run&lt;/code&gt; mean? The answer might be surprising: It could be rewritten as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -require "un" -e "httpd" . -p 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-e&lt;/code&gt; option directly executes the ruby code given, and &lt;code&gt;-r&lt;/code&gt; is the short version of &lt;code&gt;--require&lt;/code&gt;. So it requires "un", which happens to be included in Ruby's standard library¹. It was written by Hirofumi WATANABE (eban), a long-time Ruby contributer and code golf star. &lt;code&gt;un.rb&lt;/code&gt;s goal is to
provide:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Utilities to replace common UNIX commands in Makefiles etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;¹ The same is possible for &lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/ubygems.rb"&gt;requiring rubygems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see, what else is included:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#   ruby -run -e cp             -- [OPTION] SOURCE DEST
#   ruby -run -e ln             -- [OPTION] TARGET LINK_NAME
#   ruby -run -e mv             -- [OPTION] SOURCE DEST
#   ruby -run -e rm             -- [OPTION] FILE
#   ruby -run -e mkdir          -- [OPTION] DIRS
#   ruby -run -e rmdir          -- [OPTION] DIRS
#   ruby -run -e install        -- [OPTION] SOURCE DEST
#   ruby -run -e chmod          -- [OPTION] OCTAL-MODE FILE
#   ruby -run -e touch          -- [OPTION] FILE
#   ruby -run -e wait_writable  -- [OPTION] FILE
#   ruby -run -e mkmf           -- [OPTION] EXTNAME [OPTION]
#   ruby -run -e httpd          -- [OPTION] DocumentRoot
#   ruby -run -e help [COMMAND]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides &lt;strong&gt;httpd&lt;/strong&gt;, you mostly get &lt;code&gt;FileUtils&lt;/code&gt; based implementations of common unix tools,: &lt;code&gt;cp&lt;/code&gt;, &lt;code&gt;ln&lt;/code&gt;, &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt;, &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt;, and &lt;code&gt;touch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two more commands included, which don't fit into this unix category: &lt;a href="http://ruby-doc.org/stdlib-2.2.2/libdoc/mkmf/rdoc/MakeMakefile.html"&gt;mkmf&lt;/a&gt;, which you can use to create the Makefile for a Ruby C extension and &lt;a href="https://github.com/ruby/ruby/blob/ruby_2_2/lib/un.rb#L233-L264"&gt;wait_writable&lt;/a&gt;, which allows you to continuously try to open a file in writable mode.&lt;/p&gt;

&lt;h2 id="run-reference"&gt;&lt;code&gt;-run&lt;/code&gt; Reference&lt;/h2&gt;

&lt;p&gt;What follows is a reference of all &lt;strong&gt;un&lt;/strong&gt; commands. Also checkout the integrated help with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e help COMMAND
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="copy-files"&gt;Copy Files&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e cp SOURCE DEST [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SOURCE&lt;/td&gt;
      &lt;td&gt;File to copy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DEST&lt;/td&gt;
      &lt;td&gt;Where to copy the file&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td&gt;Preserve file attributes if possible&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-r&lt;/td&gt;
      &lt;td&gt;Copy directories recursively&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print executed shell command)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="create-symlink"&gt;Create Symlink&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e ln TARGET LINK_NAME [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TARGET&lt;/td&gt;
      &lt;td&gt;File to create symlink from&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LINK_NAME&lt;/td&gt;
      &lt;td&gt;Where to create the symlink&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-s&lt;/td&gt;
      &lt;td&gt;Make symbolic links instead of hard links&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-f&lt;/td&gt;
      &lt;td&gt;Overwrite files, which already exists at destination&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print executed shell command)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="move-file"&gt;Move File&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e mv SOURCE DEST [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SOURCE&lt;/td&gt;
      &lt;td&gt;File to move&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DEST&lt;/td&gt;
      &lt;td&gt;Where to move the file&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print executed shell command)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="remove-file"&gt;Remove File&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e rm FILE [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FILE&lt;/td&gt;
      &lt;td&gt;File(s) to remove&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-f&lt;/td&gt;
      &lt;td&gt;Do nothing if file does not exist&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-r&lt;/td&gt;
      &lt;td&gt;Remove the contents of directories recursively&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print executed shell command)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="create-directory"&gt;Create Directory&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e mkdir DIRS [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DIRS&lt;/td&gt;
      &lt;td&gt;Director(y/ies) to create&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td&gt;Don't fail if directory already exists&lt;br /&gt;Create all directories necessary&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print executed shell command)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="remove-directory"&gt;Remove Directory&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e rmdir DIRS [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DIRS&lt;/td&gt;
      &lt;td&gt;Director(y/ies) to remove&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td&gt;Also remove directory's ancestors&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print executed shell command)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="copy-files-and-set-attributes"&gt;Copy Files and Set Attributes&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e install SOURCE DEST [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SOURCE&lt;/td&gt;
      &lt;td&gt;File to copy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DEST&lt;/td&gt;
      &lt;td&gt;Where to copy the file&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td&gt;Apply access/modification times of SOURCE files to&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;corresponding destination files&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-m&lt;/td&gt;
      &lt;td&gt;Set permission mode (as in chmod), instead of 0755&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print executed shell command)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="change-file-mode"&gt;Change File Mode&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e chmod OCTAL-MODE FILE [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;OCTAL-MODE&lt;/td&gt;
      &lt;td&gt;File mode to set as octal number&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FILE&lt;/td&gt;
      &lt;td&gt;File(s) to operate on&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print executed shell command)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="update-file-timestamp-or-create-empty-file"&gt;Update File Timestamp or Create Empty File&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e touch FILE [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FILE&lt;/td&gt;
      &lt;td&gt;File(s) to touch&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print executed shell command)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="wait-until-file-gets-writable"&gt;Wait until File gets Writable&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e wait_writable FILE [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FILE&lt;/td&gt;
      &lt;td&gt;File(s) to wait for&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-n RETRY&lt;/td&gt;
      &lt;td&gt;Count how often to retry&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-w SEC&lt;/td&gt;
      &lt;td&gt;Time to wait between retries (in seconds)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Verbose mode (print access errors)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="make-makefile"&gt;Make Makefile&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e mkmf EXTNAME [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;EXTNAME&lt;/td&gt;
      &lt;td&gt;Extension name&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-d ARGS&lt;/td&gt;
      &lt;td&gt;Run dir_config&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-h ARGS&lt;/td&gt;
      &lt;td&gt;Run have_header&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-l ARGS&lt;/td&gt;
      &lt;td&gt;Run have_library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-f ARGS&lt;/td&gt;
      &lt;td&gt;Run have_func&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-v ARGS&lt;/td&gt;
      &lt;td&gt;Run have_var&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-t ARGS&lt;/td&gt;
      &lt;td&gt;Run have_type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-m ARGS&lt;/td&gt;
      &lt;td&gt;Run have_macro&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-c ARGS&lt;/td&gt;
      &lt;td&gt;Run have_const&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–vendor&lt;/td&gt;
      &lt;td&gt;Install to vendor_ruby&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="serve-static-files-via-http"&gt;Serve Static Files via HTTP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -run -e httpd DOCUMENT_ROOT [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Argument&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DOCUMENT_ROOT&lt;/td&gt;
      &lt;td&gt;Directory to serve&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table class="table-30-10-35-X"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Short&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;–bind-adress=ADDR&lt;/td&gt;
      &lt;td&gt;-b&lt;/td&gt;
      &lt;td&gt;IP address to bind to&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;-b 127.0.0.1&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–port=NUM&lt;/td&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td&gt;Port number to listen on&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;-p 8080&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–max-clients=MAX&lt;/td&gt;
      &lt;td&gt;-m&lt;/td&gt;
      &lt;td&gt;Max number of simultaneous clients&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;-m 2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–temp-dir=DIR&lt;/td&gt;
      &lt;td&gt;-t&lt;/td&gt;
      &lt;td&gt;Temporary directory to use&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;-t /tmp&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–do-not-reverse-lookup&lt;/td&gt;
      &lt;td&gt;-d&lt;/td&gt;
      &lt;td&gt;Disable reverse lookup&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–request-timeout=SECOND&lt;/td&gt;
      &lt;td&gt;-r&lt;/td&gt;
      &lt;td&gt;Request timeout (in seconds)&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;-r 2&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–http-version=VERSION&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;HTTP version&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;--http-version=1.0&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;-v&lt;/td&gt;
      &lt;td&gt;Start WEBrick in verbose mode&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/un.rb"&gt;un.rb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://gist.github.com/willurd/5720255"&gt;Collection of one-liners that start a static server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Constant Shadows</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/5-constant-shadows.html"/>
    <id>http://idiosyncratic-ruby.com/5-constant-shadows.html</id>
    <published>2015-05-05T02:00:00+02:00</published>
    <updated>2015-05-05T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;The &lt;strong&gt;script lines&lt;/strong&gt; feature is probably the most famous example for idiosyncratic naming in Ruby!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Ruby can save all source files you &lt;code&gt;load&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; as strings. This is useful for debugging utilities, for example, standard library's &lt;a href="https://github.com/ruby/ruby/tree/trunk/lib/debug.rb"&gt;debug&lt;/a&gt; and &lt;a href="https://github.com/ruby/ruby/tree/trunk/lib/tracer.rb"&gt;tracer&lt;/a&gt; both use these capabilities.&lt;/p&gt;

&lt;p&gt;This is possible with the &lt;strong&gt;script lines&lt;/strong&gt; object: It is a Ruby hash that stores all script filenames as keys and the whole file contents as values. It is not activated by default, you have to globally opt-in for it, which is done by &lt;em&gt;initializing it with an empty hash&lt;/em&gt;!&lt;/p&gt;

&lt;h2 id="quiz-how-to-access-this-magical-script-lines-hash"&gt;Quiz: How to Access this Magical Script Lines Hash?&lt;/h2&gt;

&lt;p&gt;A) &lt;code&gt;script_lines&lt;/code&gt;&lt;br /&gt;
B) &lt;code&gt;SCRIPT_LINES&lt;/code&gt;&lt;br /&gt;
C) &lt;code&gt;__SCRIPT_LINES&lt;/code&gt;&lt;br /&gt;
D) &lt;code&gt;__script_lines__&lt;/code&gt;&lt;br /&gt;
E) &lt;code&gt;SCRIPT_LINES__&lt;/code&gt;&lt;br /&gt;
F) &lt;code&gt;Ruby::DebugInfo::SCRIPT_LINES&lt;/code&gt;&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
The answer is E: &lt;code&gt;SCRIPT_LINES__&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;WEIRD. What gives with the trailing underscores? It’s such a big constant that it leaves a two-character shadow!!&lt;/em&gt;&lt;/p&gt;
&lt;a href="http://viewsourcecode.org/why/redhanded/inspect/whoaScript_lines__.html"&gt;&amp;mdash; why&lt;/a&gt;
&lt;/blockquote&gt;

&lt;h2 id="usage-example"&gt;Usage Example&lt;/h2&gt;

&lt;p&gt;It is a best practice to check if it already is defined, because someone else might have already activated it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SCRIPT_LINES__ = {} unless defined? SCRIPT_LINES__
require 'abbrev'
SCRIPT_LINES__.size
# =&amp;gt; 1
SCRIPT_LINES__.keys.first
# =&amp;gt; "/home/user/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/abbrev.rb"
SCRIPT_LINES__.values.first.is_a? Array
# =&amp;gt; true
SCRIPT_LINES__.values.first.size
# =&amp;gt; 131
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;puts SCRIPT_LINES__.values.first&lt;/code&gt; will output every line of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#--
# Copyright (c) 2001,2003 Akinori MUSHA &amp;lt;knu@iDaemons.org&amp;gt;
#
# All rights reserved.  You can redistribute and/or modify it under
# the same terms as Ruby.
#
# $Idaemons: /home/cvs/rb/abbrev.rb,v 1.2 2001/05/30 09:37:45 knu Exp $
# $RoughId: abbrev.rb,v 1.4 2003/10/14 19:45:42 knu Exp $
# $Id: abbrev.rb 46784 2014-07-11 08:16:05Z hsbt $
#++

##
# Calculates the set of unambiguous abbreviations for a given set of strings.
#
#   require 'abbrev'
#   require 'pp'
#
#   pp Abbrev.abbrev(['ruby'])
#   #=&amp;gt;  {"ruby"=&amp;gt;"ruby", "rub"=&amp;gt;"ruby", "ru"=&amp;gt;"ruby", "r"=&amp;gt;"ruby"}
#
#   pp Abbrev.abbrev(%w{ ruby rules })
#
# _Generates:_
#   { "ruby"  =&amp;gt;  "ruby",
#     "rub"   =&amp;gt;  "ruby",
#     "rules" =&amp;gt;  "rules",
#     "rule"  =&amp;gt;  "rules",
#     "rul"   =&amp;gt;  "rules" }
#
# It also provides an array core extension, Array#abbrev.
#
#   pp %w{ summer winter }.abbrev
#
# _Generates:_
#   { "summer"  =&amp;gt; "summer",
#     "summe"   =&amp;gt; "summer",
#     "summ"    =&amp;gt; "summer",
#     "sum"     =&amp;gt; "summer",
#     "su"      =&amp;gt; "summer",
#     "s"       =&amp;gt; "summer",
#     "winter"  =&amp;gt; "winter",
#     "winte"   =&amp;gt; "winter",
#     "wint"    =&amp;gt; "winter",
#     "win"     =&amp;gt; "winter",
#     "wi"      =&amp;gt; "winter",
#     "w"       =&amp;gt; "winter" }

module Abbrev

  # Given a set of strings, calculate the set of unambiguous abbreviations for
  # those strings, and return a hash where the keys are all the possible
  # abbreviations and the values are the full strings.
  #
  # Thus, given +words+ is "car" and "cone", the keys pointing to "car" would
  # be "ca" and "car", while those pointing to "cone" would be "co", "con", and
  # "cone".
  #
  #   require 'abbrev'
  #
  #   Abbrev.abbrev(%w{ car cone })
  #   #=&amp;gt; {"ca"=&amp;gt;"car", "con"=&amp;gt;"cone", "co"=&amp;gt;"cone", "car"=&amp;gt;"car", "cone"=&amp;gt;"cone"}
  #
  # The optional +pattern+ parameter is a pattern or a string. Only input
  # strings that match the pattern or start with the string are included in the
  # output hash.
  #
  #   Abbrev.abbrev(%w{car box cone crab}, /b/)
  #   #=&amp;gt; {"box"=&amp;gt;"box", "bo"=&amp;gt;"box", "b"=&amp;gt;"box", "crab" =&amp;gt; "crab"}
  #
  #   Abbrev.abbrev(%w{car box cone}, 'ca')
  #   #=&amp;gt; {"car"=&amp;gt;"car", "ca"=&amp;gt;"car"}
  def abbrev(words, pattern = nil)
    table = {}
    seen = Hash.new(0)

    if pattern.is_a?(String)
      pattern = /\A#{Regexp.quote(pattern)}/  # regard as a prefix
    end

    words.each do |word|
      next if word.empty?
      word.size.downto(1) { |len|
        abbrev = word[0...len]

        next if pattern &amp;amp;&amp;amp; pattern !~ abbrev

        case seen[abbrev] += 1
        when 1
          table[abbrev] = word
        when 2
          table.delete(abbrev)
        else
          break
        end
      }
    end

    words.each do |word|
      next if pattern &amp;amp;&amp;amp; pattern !~ word

      table[word] = word
    end

    table
  end

  module_function :abbrev
end

class Array
  # Calculates the set of unambiguous abbreviations for the strings in +self+.
  #
  #   require 'abbrev'
  #   %w{ car cone }.abbrev
  #   #=&amp;gt; {"car"=&amp;gt;"car", "ca"=&amp;gt;"car", "cone"=&amp;gt;"cone", "con"=&amp;gt;"cone", "co"=&amp;gt;"cone"}
  #
  # The optional +pattern+ parameter is a pattern or a string. Only input
  # strings that match the pattern or start with the string are included in the
  # output hash.
  #
  #   %w{ fast boat day }.abbrev(/^.a/)
  #   #=&amp;gt; {"fast"=&amp;gt;"fast", "fas"=&amp;gt;"fast", "fa"=&amp;gt;"fast", "day"=&amp;gt;"day", "da"=&amp;gt;"day"}
  #
  #   Abbrev.abbrev(%w{car box cone}, "ca")
  #   #=&amp;gt; {"car"=&amp;gt;"car", "ca"=&amp;gt;"car"}
  #
  # See also Abbrev.abbrev
  def abbrev(pattern = nil)
    Abbrev::abbrev(self, pattern)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="memory-impact"&gt;Memory Impact&lt;/h2&gt;

&lt;p&gt;Only use this for debugging purpose, since a lot of strings get loaded into your memory. This is a comparison loading ActiveSupport with and without script lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'active_support/all'
puts "#{`ps -o rss -p #{Process.pid}`.strip.split.last.to_i / 1024.0} MB"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result: 16.421875 MB&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SCRIPT_LINES__ = {}
require 'active_support/all'
puts "#{`ps -o rss -p #{Process.pid}`.strip.split.last.to_i / 1024.0} MB"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result: 19.85546875 MB&lt;/p&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/ruby/ruby/blob/ruby_2_2/parse.y#L5446-L5460"&gt;Source: SCRIPT_LINES__&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/jruby/jruby/blob/9.0.0.0.pre2/core/src/main/java/org/jruby/parser/Parser.java#L176-L189"&gt;JRuby Source: SCRIPT_LINES__&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7220896/get-current-ruby-process-memory-usage"&gt;The memory profiling one-liner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>What the Pack?</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/4-what-the-pack.html"/>
    <id>http://idiosyncratic-ruby.com/4-what-the-pack.html</id>
    <published>2015-05-04T02:00:00+02:00</published>
    <updated>2015-05-04T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;Ruby comes equipped with a powerful option for low level string manipulation: &lt;code&gt;String#unpack&lt;/code&gt; and its counter part &lt;code&gt;Array#pack&lt;/code&gt;. Today's episode takes a closer look.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The general way how &lt;code&gt;String#unpack&lt;/code&gt; is used is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"a string".unpack("pack template with directives")
# =&amp;gt; [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The string contains some data in a specific format, which you "unpack" using a format specification. The format specification is defined in the pack template. The result is an array that contains the same data (or parts of it), but in a different representation. Take a look at this very simple example, which converts a four-letter ASCII string into its integer based byte representation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Ruby".unpack("C C C C")
# =&amp;gt; [82, 117, 98, 121]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Array#pack&lt;/code&gt; works the other way around, so if you have the integer byte representation, it will convert it to real bytes in a string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[82, 117, 98, 121].pack("C C C C")
# =&amp;gt; "Ruby"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="pack-template-format"&gt;Pack Template Format&lt;/h2&gt;

&lt;p&gt;The format of the pack template (&lt;code&gt;"C C C C"&lt;/code&gt; in the example above) might be unfamiliar, but it is not too complicated. It is a series of letters that describe how to interpret the next bytes in the string you are operating on. A letter is called "directive". Each directive has a different meaning, see below for a complete list of available directives. &lt;code&gt;C&lt;/code&gt; essentially means: One integer byte value.&lt;/p&gt;

&lt;p&gt;A directive can be followed by a number, how often it should be applied. So you could rewrite the above code to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Ruby".unpack("C4")
# =&amp;gt; [82, 117, 98, 121]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don't need to read the complete string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Ruby".unpack("C2")
# =&amp;gt; [82, 117]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of using a number, it is possible to use &lt;code&gt;*&lt;/code&gt;, which denotes that the directive should be applied as often as possible:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Ruby".unpack("C*")
# =&amp;gt; [82, 117, 98, 121]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every character that is not a directive, a digit or &lt;code&gt;*&lt;/code&gt; will be ignored. This is useful to make a pack template more readable, by separating directives with spaces.&lt;/p&gt;

&lt;p&gt;What follows is a list of all directives and how to use them.&lt;/p&gt;

&lt;h2 id="integer-directives"&gt;Integer Directives&lt;/h2&gt;

&lt;p&gt;These will all unpack the bytes of a string to an array of integers. One of these integers represents one or more bytes. You have different modes that differ in the number of bytes each integer represents:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Directive&lt;/th&gt;
      &lt;th&gt;Size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;char&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;I!&lt;/code&gt; or &lt;code&gt;I_&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;S!&lt;/code&gt; or &lt;code&gt;S_&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;short&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;L!&lt;/code&gt; or &lt;code&gt;L_&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Q!&lt;/code&gt; or &lt;code&gt;Q_&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;long long&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Except for &lt;em&gt;char&lt;/em&gt; (which is always one byte), it depends on your operating system, how many bytes each of this modes actually reads. So if your operating system defines &lt;em&gt;short&lt;/em&gt; as 2 bytes, you will get an array that represents every group of two bytes as an integer value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"\x01\x00\x02\x00".unpack("S!*") #=&amp;gt; [1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or the other way around:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1, 2].pack("S!*") # =&amp;gt; "\x01\x00\x02\x00"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do not want to depend on what byte sizes you operating system defines, you can omit the &lt;code&gt;!&lt;/code&gt; and it will use a fixed byte size (the exception is &lt;em&gt;int&lt;/em&gt;, which will always use its native size).&lt;/p&gt;

&lt;h3 id="c--an-unsigned-integer-per-byte"&gt;C | An Unsigned &lt;code&gt;Integer&lt;/code&gt; per Byte&lt;/h3&gt;

&lt;p&gt;Range: 0 to 255&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("C*")
# =&amp;gt; [73, 100, 105, 111, 115, 121, 110, 99, 114, 195, 164, 116, 105, 99]

[73, 100, 105, 111, 115, 121, 110, 99, 114, 195, 164, 116, 105, 99].pack("C*")
# =&amp;gt; "Idiosyncr\xC3\xA4tic"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;Array#pack&lt;/code&gt; will not set the string's encoding for you, because it has no way to know.&lt;/p&gt;

&lt;h3 id="c--a-signed-integer-per-byte"&gt;c | A Signed &lt;code&gt;Integer&lt;/code&gt; per Byte&lt;/h3&gt;

&lt;p&gt;Range: -128 to 127&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("c*")
# =&amp;gt; [73, 100, 105, 111, 115, 121, 110, 99, 114, -61, -92, 116, 105, 99]

[73, 100, 105, 111, 115, 121, 110, 99, 114, -61, -92, 116, 105, 99].pack('c*')
# =&amp;gt; "Idiosyncr\xC3\xA4tic"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="s--an-unsigned-integer-per-2-bytes"&gt;S | An Unsigned &lt;code&gt;Integer&lt;/code&gt; per 2 Bytes&lt;/h3&gt;

&lt;p&gt;Range: 0 to 65535&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("S*")
# =&amp;gt; [25673, 28521, 31091, 25454, 50034, 29860, 25449]

[25673, 28521, 31091, 25454, 50034, 29860, 25449].pack("S*")
# =&amp;gt; "Idiosyncr\xC3\xA4tic"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="s--a-signed-integer-per-2-bytes"&gt;s | A Signed &lt;code&gt;Integer&lt;/code&gt; per 2 Bytes&lt;/h3&gt;

&lt;p&gt;Range: -32768 to 32767&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("s*")
# =&amp;gt; [73, 100, 105, 111, 115, 121, 110, 99, 114, -61, -92, 116, 105, 99]

[25673, 28521, 31091, 25454, -15502, 29860, 25449].pack("s*")
# =&amp;gt; "Idiosyncr\xC3\xA4tic"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="l--an-unsigned-integer-per-4-bytes"&gt;L | An Unsigned &lt;code&gt;Integer&lt;/code&gt; per 4 Bytes&lt;/h3&gt;

&lt;p&gt;Range: 0 to 4294967296&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("L*")
# =&amp;gt; [1869177929, 1668184435, 1956954994]

[1869177929, 1668184435, 1956954994].pack("L*")
# =&amp;gt; "Idiosyncr\xC3\xA4t"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: The byte size in this example is 14, which is not dividable by 4, so it will ignore the last 2 bytes. If you need them, you could use a different template like: &lt;code&gt;"L* C*"&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="l--a-signed-integer-per-4-bytes"&gt;l | A Signed &lt;code&gt;Integer&lt;/code&gt; per 4 Bytes&lt;/h3&gt;

&lt;p&gt;Range: -2147483648 to 2147483647&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("l*")
# =&amp;gt; [1869177929, 1668184435, 1956954994]

[1869177929, 1668184435, 1956954994].pack("l*")
# =&amp;gt; "Idiosyncr\xC3\xA4t"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q--an-unsigned-integer-per-8-bytes"&gt;Q | An Unsigned &lt;code&gt;Integer&lt;/code&gt; per 8 Bytes&lt;/h3&gt;

&lt;p&gt;Range: 0 to 18446744073709551616&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("Q*")
# =&amp;gt; [7164797593890415689]

[7164797593890415689].pack("Q*")
# =&amp;gt; "Idiosync"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q--a-signed-integer-per-8-bytes"&gt;q | A Signed &lt;code&gt;Integer&lt;/code&gt; per 8 Bytes&lt;/h3&gt;

&lt;p&gt;Range: -9223372036854775808 to 9223372036854775807&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("q*")
# =&amp;gt; [7164797593890415689]

[7164797593890415689].pack("q*")
# =&amp;gt; "Idiosync"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="a-note-on-byte-order-big-endian-vs-little-endian"&gt;A Note on Byte Order (Big-Endian vs. Little-Endian)&lt;/h3&gt;

&lt;p&gt;All the previous examples used the native byte order, which means, that the operating system defines, if the more significant bytes come first (little-endian) or last (big-endian). You will find more information about &lt;a href="http://en.wikipedia.org/wiki/Endianness"&gt;"endianess" on wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don't want to rely on your operating system to define byte order, you can add &lt;code&gt;&amp;lt;&lt;/code&gt; for big-endianess or &lt;code&gt;&amp;gt;&lt;/code&gt; for little-endianess to your template's directives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"\x01\x00\x02\x00".unpack("S&amp;lt;*") #=&amp;gt; [1, 2]
"\x01\x00\x02\x00".unpack("S&amp;gt;*") #=&amp;gt; [256, 512]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="integer-shortcut-directives"&gt;Integer Shortcut Directives&lt;/h2&gt;

&lt;h3 id="n--an-unsigned-integer-per-2-bytes-big-endian-similar-to-s"&gt;n | An Unsigned &lt;code&gt;Integer&lt;/code&gt; per 2 Bytes, Big-Endian (Similar to &lt;code&gt;S&amp;gt;&lt;/code&gt;)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("n*")
# =&amp;gt; [18788, 26991, 29561, 28259, 29379, 42100, 26979]

[18788, 26991, 29561, 28259, 29379, 42100, 26979].pack("n*")
# =&amp;gt; "Idiosyncr\xC3\xA4tic"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="n--a-signed-integer-per-4-bytes-big-endian-similar-to-l"&gt;N | A Signed &lt;code&gt;Integer&lt;/code&gt; per 4 Bytes, Big-Endian (Similar to &lt;code&gt;L&amp;gt;&lt;/code&gt;)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("N*")
# =&amp;gt; [1231317359, 1937337955, 1925424244]

[1231317359, 1937337955, 1925424244].pack("N*")
# =&amp;gt; "Idiosyncr\xC3\xA4t"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="v--an-unsigned-integer-per-2-bytes-little-endian-similar-to-s"&gt;v | An Unsigned &lt;code&gt;Integer&lt;/code&gt; per 2 Bytes, Little-Endian (Similar to &lt;code&gt;S&amp;lt;&lt;/code&gt;)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("v*")
# =&amp;gt; [25673, 28521, 31091, 25454, 50034, 29860, 25449]

[25673, 28521, 31091, 25454, 50034, 29860, 25449].pack("v*")
# =&amp;gt; "Idiosyncr\xC3\xA4tic"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="v--a-signed-integer-per-4-bytes-little-endian-similar-to-l"&gt;V | A Signed &lt;code&gt;Integer&lt;/code&gt; per 4 Bytes, Little-Endian (Similar to &lt;code&gt;L&amp;lt;&lt;/code&gt;)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("V*")
# =&amp;gt; [1869177929, 1668184435, 1956954994]

[1869177929, 1668184435, 1956954994].pack("V*")
# =&amp;gt; "Idiosyncr\xC3\xA4t"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="integer-encoding-directives"&gt;Integer Encoding Directives&lt;/h2&gt;

&lt;h3 id="u--utf-8-characters"&gt;U | UTF-8 Characters&lt;/h3&gt;

&lt;p&gt;This will convert the string to &lt;a href="http://en.wikipedia.org/wiki/Code_point"&gt;unicode code points.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"ɔıʇɐɹɔuʎsoıpı".unpack("U*")
# =&amp;gt; [596, 305, 647, 592, 633, 596, 117, 654, 115, 111, 305, 112, 305]

[596, 305, 647, 592, 633, 596, 117, 654, 115, 111, 305, 112, 305].pack("U*")
# =&amp;gt; "ɔıʇɐɹɔuʎsoıpı"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="w--ber-compression"&gt;w | BER Compression&lt;/h3&gt;

&lt;p&gt;See &lt;a href="http://en.wikipedia.org/wiki/X.690#BER_encoding"&gt;wikipedia on X.690&lt;/a&gt; for an explanation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("w*")
# =&amp;gt; [73, 100, 105, 111, 115, 121, 110, 99, 114, 1102452, 105, 99]

[73, 100, 105, 111, 115, 121, 110, 99, 114, 1102452, 105, 99].pack("w*")
# =&amp;gt; "Idiosyncr\xC3\xA4tic"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="float-directives"&gt;Float Directives&lt;/h2&gt;

&lt;p&gt;The following directives will interpret bytes as &lt;a href="http://en.wikipedia.org/wiki/IEEE_floating_point"&gt;Floats.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="d-d--a-float-double-precision-native-endian"&gt;D, d | A &lt;code&gt;Float&lt;/code&gt; (Double Precision, Native-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[1.2, 3.4].pack("D*")
# =&amp;gt; "333333\xF3?333333\v@"

"333333\xF3?333333\v@".unpack("D*")
#=&amp;gt; [1.2, 3.4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="f--a-float-single-precision-native-endian"&gt;F | A &lt;code&gt;Float&lt;/code&gt; (Single Precision, Native-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[1.2, 3.4].pack("F*")
# =&amp;gt; "\x9A\x99\x99?\x9A\x99Y@"

"\x9A\x99\x99?\x9A\x99Y@".unpack("F*")
# =&amp;gt; [1.2000000476837158, 3.4000000953674316]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="e--a-float-double-precision-little-endian"&gt;E | A &lt;code&gt;Float&lt;/code&gt; (Double Precision, Little-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[1.2, 3.4].pack("E*")
# =&amp;gt; "333333\xF3?333333\v@"

"333333\xF3?333333\v@".unpack("E*")
#=&amp;gt; [1.2, 3.4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="e--a-float-single-precision-little-endian"&gt;e | A &lt;code&gt;Float&lt;/code&gt; (Single Precision, Little-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[1.2, 3.4].pack("e*")
# =&amp;gt; "\x9A\x99\x99?\x9A\x99Y@"

"\x9A\x99\x99?\x9A\x99Y@".unpack("e*")
# =&amp;gt; [1.2000000476837158, 3.4000000953674316]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="g--a-float-double-precision-big-endian"&gt;G | A &lt;code&gt;Float&lt;/code&gt; (Double Precision, Big-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[1.2, 3.4].pack("G*")
# =&amp;gt; "?\xF3333333@\v333333"

"?\xF3333333@\v333333".unpack("G*")
#=&amp;gt; [1.2, 3.4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="g--a-float-single-precision-big-endian"&gt;g | A &lt;code&gt;Float&lt;/code&gt; (Single Precision, Big-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[1.2, 3.4].pack("g*")
# =&amp;gt; "?\x99\x99\x9A@Y\x99\x9A"

"\x9A\x99\x99?\x9A\x99Y@".unpack("g*")
# =&amp;gt; [1.2000000476837158, 3.4000000953674316]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="string-directives"&gt;String Directives&lt;/h2&gt;

&lt;p&gt;String directives are more confusing in the regard that input and output of a &lt;code&gt;pack&lt;/code&gt; or &lt;code&gt;unpack&lt;/code&gt; operation are both strings, one of them being wrapped as a single argument in an array. The rule to remember here is that the string representation is something encoded (which might be saved or sent over the way), while the string-in-an-array format represents the data in a readable format.&lt;/p&gt;

&lt;h3 id="a--arbitrary-string"&gt;a | Arbitrary String&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic".unpack("a20")
# =&amp;gt; ["Idiosyncr\xC3\xA4tic"]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fills with null bytes when packing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;["Idiosyncrätic"].pack("a20")
# =&amp;gt; "Idiosyncr\xC3\xA4tic\x00\x00\x00\x00\x00\x00"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="a--arbitrary-string-clean-null-bytes"&gt;A | Arbitrary String (Clean Null Bytes)&lt;/h3&gt;

&lt;p&gt;Like &lt;strong&gt;a&lt;/strong&gt;, but removes spaces and null bytes when unpacking:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic    \0 ".unpack("A20")
# =&amp;gt; ["Idiosyncr\xC3\xA4tic"]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like &lt;strong&gt;a&lt;/strong&gt;, but replaces null bytes with spaces when packing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;["Idiosyncrätic"].pack("A20")
# =&amp;gt; "Idiosyncr\xC3\xA4tic      "
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="z--null-terminated-string"&gt;Z | Null-Terminated String&lt;/h3&gt;

&lt;p&gt;Like &lt;strong&gt;a&lt;/strong&gt;, but unpacking will not read further than null bytes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrätic\0R".unpack("Z20")
# =&amp;gt; ["Idiosyncr\xC3\xA4tic"]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like &lt;strong&gt;a&lt;/strong&gt;, but packing will add a null byte to the end, if used with &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;["Idiosyncrätic"].pack("Z*")
# =&amp;gt; "Idiosyncr\xC3\xA4tic\x00"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="string-base-conversion-directives"&gt;String Base Conversion Directives&lt;/h2&gt;

&lt;h3 id="b--bit-string-big-endian"&gt;B | Bit String (Big-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"abc".unpack("B*")
# =&amp;gt; ["011000010110001001100011"]

["011000010110001001100011"].pack("B*")
# =&amp;gt; "abc"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="b--bit-string-little-endian"&gt;b | Bit String (Little-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"abc".unpack("b*")
# =&amp;gt; ["100001100100011011000110"]

["100001100100011011000110"].pack("b*")
# =&amp;gt; "abc"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="h--hex-string-big-endian"&gt;H | Hex String (Big-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"xyz".unpack("H*")
# =&amp;gt; ["78797a"]

["78797a"].pack("H*")
# =&amp;gt; "xyz"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="h--hex-string-little-endian"&gt;h | Hex String (Little-Endian)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"xyz".unpack("h*")
# =&amp;gt; ["8797a7"]

["8797a7"].pack("h*")
# =&amp;gt; "xyz"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="string-encoding-directives"&gt;String Encoding Directives&lt;/h2&gt;

&lt;p&gt;Pack supports a few encoding conversion directives. Note that they are idiosyncratic, since they don't take a count option.&lt;/p&gt;

&lt;h3 id="u--uu-encoding"&gt;u | UU-Encoding&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Uuencoding"&gt;Unix-to-Unix Encoding.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;["Idiosyncrätic"].pack("u")
# =&amp;gt; ".261I;W-Y;F-RPZ1T:6,`\n"

".261I;W-Y;F-RPZ1T:6,`\n".unpack("u")
# =&amp;gt; ["Idiosyncr\xC3\xA4tic"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="m--quoted-printable--mime-encoding-rfc2045"&gt;M | Quoted-Printable / MIME Encoding (RFC2045)&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Quoted-printable"&gt;Quoted-Printable.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;["Idiosyncrätic"].pack("M")
# =&amp;gt; "Idiosyncr=C3=A4tic=\n"

"Idiosyncr=C3=A4tic=\n".unpack("M")
# =&amp;gt; ["Idiosyncr\xC3\xA4tic"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="m--base64-encoding-rfc-2045"&gt;m | Base64 Encoding (RFC 2045)&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Base64"&gt;Base64.&lt;/a&gt; Ruby's standard library also contains a &lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/base64.rb#L23"&gt;Base64 wrapper.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;["Idiosyncrätic"].pack("m")
# =&amp;gt; "SWRpb3N5bmNyw6R0aWM=\n"

"SWRpb3N5bmNyw6R0aWM=\n".unpack("m")
# =&amp;gt; ["Idiosyncr\xC3\xA4tic"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="m0--base64-encoding-rfc-4648"&gt;m0 | Base64 Encoding (RFC 4648)&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Base64#RFC_4648"&gt;Base64.&lt;/a&gt; This will not add a new-line at the end.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;["Idiosyncrätic"].pack("m0")
# =&amp;gt; "SWRpb3N5bmNyw6R0aWM="

"SWRpb3N5bmNyw6R0aWM=".unpack("m0")
# =&amp;gt; ["Idiosyncr\xC3\xA4tic"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="pointer-directives"&gt;Pointer Directives&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Pointer_%28computer_programming%29"&gt;Pointer&lt;/a&gt; inspection. If you want to understand how to use these, you should read &lt;a href="https://github.com/ruby/ruby/blob/trunk/pack.c"&gt;pack's source.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="p--pointer-to-fixed-length-string"&gt;P | Pointer to Fixed-Length String&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;["Idiosyncrätic"].pack('P*')
# =&amp;gt; "\xC0\xDA\x04,.\x7F\x00\x00"

["Idiosyncrätic"].pack('P*').unpack("P*")
# =&amp;gt; ["Idiosync"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="p--pointer-to-null-terminated-string"&gt;p | Pointer to Null-Terminated String&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;["Idiosyncrätic"].pack('p*')
# =&amp;gt; "\xB8\xF8\x03\x1C.\x7F\x00\x00"

["Idiosyncrätic"].pack('p*').unpack("p*")
# =&amp;gt; ["Idiosyncrätic"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="positional-directives"&gt;Positional Directives&lt;/h2&gt;

&lt;p&gt;You can jump around the current byte position while processing the data. This enables you to read data twice or ignore some data in the middle.&lt;/p&gt;

&lt;h3 id="go-to-position"&gt;@ | Go to Position&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"abc".unpack("H* @0B*")
#=&amp;gt; ["616263", "011000010110001001100011"]

["ffffff", "011000010110001001100011"].pack("H* @0B*")
# =&amp;gt; "abc"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="x--move-a-byte-back"&gt;X | Move a Byte Back&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"Idiosyncrä".unpack("C* X c*")
# =&amp;gt; [73, 100, 105, 111, 115, 121, 110, 99, 114, 195, 164, -92]

[73, 100, 105, 111, 115, 121, 110, 99, 114, 195, 164, -92].pack("C* X c*")
# =&amp;gt; "Idiosyncr\xC3\xA4"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="x--skip-byte-fill-with-null-byte-when-packing"&gt;x | Skip Byte (Fill with Null Byte when Packing)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;"abc".unpack("C x C")
# =&amp;gt; [97, 99]

[97, 99].pack("C x C")
# =&amp;gt; "a\x00c"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/String.html#method-i-unpack"&gt;RDoc: String#unpack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://ruby-doc.org/core-2.2.2/Array.html#method-i-pack"&gt;RDoc: Array#pack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/ruby/ruby/blob/trunk/pack.c"&gt;Source: pack.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.perlmonks.org/?node_id=224666"&gt;unpack in Perl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ruby, Can You Speak Louder?</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/3-ruby-can-you-speak-louder.html"/>
    <id>http://idiosyncratic-ruby.com/3-ruby-can-you-speak-louder.html</id>
    <published>2015-05-03T02:00:00+02:00</published>
    <updated>2015-05-03T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;Ruby has some ways to turn on &lt;em&gt;debug mode&lt;/em&gt;, which library authors can use to print out extra information for interested users. But unfortunately, there are multiple &lt;em&gt;debug modes&lt;/em&gt; in Ruby. When to use which one?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Consider you have this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def production_method
  puts "I am doing the right thing part 1"
  # @a is really intereting here
  puts "I am doing the right thing part 2"
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could query the global &lt;code&gt;$DEBUG&lt;/code&gt; variable, which can be toggled when starting the Ruby interpreter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def production_method
  puts "I am doing the right thing part 1"
  $stderr.puts "@a is now: #{@a}" if $DEBUG
  puts "I am doing the right thing part 2"
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But is this the best way? It also could have been:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$stderr.puts "@a is now: #{@a}" if $VERBOSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$stderr.puts "@a is now: #{@a}" if Library.debug_mode?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And what about:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;warn "@a is now: #{@a}"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby is a little idiosyncratic here. There is no standard way to signalize "I want to have more information". Ruby has two global debug modes: &lt;em&gt;debug mode&lt;/em&gt; and &lt;em&gt;verbosity mode&lt;/em&gt; and both behave differently. Within Ruby, the current debug mode state can be queried from two global variables:&lt;/p&gt;

&lt;h2 id="global-debug-state"&gt;Global Debug State&lt;/h2&gt;

&lt;p&gt;This table shows the different modes both of them can have:&lt;/p&gt;

&lt;table class="table-15-15-30-X"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Variable&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
      &lt;th&gt;CLI-Variable Mirrors¹&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$DEBUG&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;$-d == true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Debug mode active&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$DEBUG&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;false&lt;/code&gt;²&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;$-d == false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Debug mode inactive&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$VERBOSE&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;$-v == true&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$-w == true&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$-W == 2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Verbosity mode active&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$VERBOSE&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;false&lt;/code&gt;²&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;$-v == false&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$-w == false&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$-W == 1&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Medium verbosity mode&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;$VERBOSE&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;$-v == nil&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$-w == nil&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$-W == 0&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Silent verbosity mode&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;¹ Will be set automatically&lt;br /&gt;
² Default&lt;/p&gt;

&lt;p&gt;Note that the Verbosity mode is different for &lt;code&gt;$VERBOSE == false&lt;/code&gt; and &lt;code&gt;$VERBOSE == nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another side note: While it is possible to change &lt;code&gt;$DEBUG&lt;/code&gt; to an arbitrary value, this is not true for &lt;code&gt;$VERBOSE&lt;/code&gt; - If you assign it a truish value, it will just be set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What follows is a list of command line options that have an effects on the debug modes:&lt;/p&gt;

&lt;h2 id="command-line-options-for-debug-modes"&gt;Command Line Options for Debug Modes&lt;/h2&gt;

&lt;table class="table-20-20-X"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;Alias&lt;/th&gt;
      &lt;th&gt;Effects&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;-W2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;-W&lt;/code&gt;, &lt;code&gt;-w&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Sets &lt;code&gt;$VERBOSE&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;-W1&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Nothing (&lt;code&gt;$VERBOSE&lt;/code&gt; remains &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;-W0&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Sets &lt;code&gt;$VERBOSE&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;--verbose&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Sets &lt;code&gt;$VERBOSE&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;br /&gt;Also quits Ruby if no arguments given&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Sets &lt;code&gt;$VERBOSE&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;br /&gt;Also Prints Ruby version&lt;br /&gt;Also quits Ruby if no arguments given&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;--debug&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Sets &lt;code&gt;$DEBUG&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;br /&gt;Sets &lt;code&gt;$VERBOSE&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A funny thing to note is that &lt;code&gt;-v&lt;/code&gt; is a shortcut for &lt;code&gt;--version&lt;/code&gt; as well as it is one for &lt;code&gt;--verbose&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="verbosity"&gt;Verbosity&lt;/h2&gt;

&lt;p&gt;The only thing that actually changes the behavior of the interpreter is the value of &lt;code&gt;VERBOSE&lt;/code&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;code&gt;$VERBOSE&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;Effect&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;Kernel#warn&lt;/code&gt; will output to &lt;code&gt;STDERR&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Interpreter warnings will be printed&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id="what-to-use"&gt;What to Use?&lt;/h2&gt;

&lt;p&gt;Use neither &lt;code&gt;$VERBOSE&lt;/code&gt;, nor &lt;code&gt;$DEBUG&lt;/code&gt;, but to use an instance variable in your library. Or use standard library's logger or some other logging gem. It is easier to understand than relying on the global debug modes.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;$VERBOSE = true&lt;/code&gt; if you are interested in interpreter warnings.&lt;/p&gt;

&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://mislav.uniqpath.com/2011/06/ruby-verbose-mode/"&gt;Verbose mode and warnings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://api.rubyonrails.org/classes/Kernel.html#method-i-silence_warnings"&gt;Rails' verbosity silencer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.ruby-toolbox.com/categories/Logging"&gt;Ruby Loggers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ruby String Magic</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/2-ruby-string-magic.html"/>
    <id>http://idiosyncratic-ruby.com/2-ruby-string-magic.html</id>
    <published>2015-05-02T02:00:00+02:00</published>
    <updated>2015-05-02T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;Ruby strings are powerful. You could say, Ruby is build around manipulating strings. There are tons of ways how to work with strings and as of Ruby 2.2.2, &lt;code&gt;String&lt;/code&gt; offers 116 instance methods. Knowing them well can save you a lot of time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;What follows is a list of 10 lesser known things about strings: Some of them useful, some of them idiosyncratic, some both.&lt;/p&gt;

&lt;h2 id="named-format-strings"&gt;Named Format Strings&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Btw, Ruby&amp;#39;s format strings can be used with hashes:&amp;#10;&amp;quot;%&amp;lt;language&amp;gt;s: %&amp;lt;author&amp;gt;s&amp;quot; % { language: &amp;quot;Ruby&amp;quot;, author: &amp;quot;matz&amp;quot; } #=&amp;gt; &amp;quot;Ruby: matz&amp;quot;&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/527152031782674432"&gt;October 28, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id="string-concatenation"&gt;String Concatenation&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;There is a lesser-known syntax for concatenating string literals: &amp;quot;just&amp;quot; &amp;quot;put&amp;quot; &amp;quot;them&amp;quot; &amp;quot;directly&amp;quot;&amp;quot;after&amp;quot; &amp;quot;each&amp;quot; &amp;quot;other&amp;quot;&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/510013718076600320"&gt;September 11, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id="strings--empty-ranges"&gt;Strings + Empty Ranges&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Ruby is strange. How can an *empty* range have an effect when applied to a string?&amp;#10;r = 0..-3&amp;#10;r.to_a.empty? #=&amp;gt; true&amp;#10;&amp;quot;Ruby&amp;quot;[r] #=&amp;gt; &amp;quot;Ru&amp;quot;&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/519066888014659584"&gt;October 6, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id="whitespace-matching"&gt;Whitespace Matching&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Unicode is full of whitespaces. This is how you match them:&amp;#10;a=&amp;quot;    　&amp;quot; #=&amp;gt; &amp;quot;    　&amp;quot;&amp;#10;a.scan(/\s/).size #=&amp;gt; 1&amp;#10;a.scan(/[[:space:]]/).size #=&amp;gt; 5&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/539440415498579969"&gt;December 1, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id="stringsucc"&gt;&lt;code&gt;String#succ&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Ruby&amp;#39;s weird calculation of string successors:&amp;#10;&amp;quot;9z&amp;quot;.succ #=&amp;gt; &amp;quot;10a&amp;quot;&amp;#10;&amp;quot;z9&amp;quot;.succ #=&amp;gt; &amp;quot;aa0&amp;quot;&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/520230545465548801"&gt;October 9, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id="stdlib-string-compression"&gt;Stdlib String Compression&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Simple stdlib string compression:&amp;#10;require &amp;#39;zlib&amp;#39;&amp;#10;s = &amp;quot;Ruby&amp;quot;*99&amp;#10;s.size #=&amp;gt; 396&amp;#10;c = Zlib.deflate(s)&amp;#10;c.size #=&amp;gt; 17&amp;#10;Zlib.inflate(c) == s #=&amp;gt;true&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/511902948805599233"&gt;September 16, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id="using-regex-groups-in-string"&gt;Using Regex Groups in &lt;code&gt;String#[]&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;You can use regex incl. captured groups when accessing substrings via the [] method: &amp;quot;#42&amp;quot;[/.(\d+)/, 1] #=&amp;gt; &amp;quot;42&amp;quot;&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/508605294059192320"&gt;September 7, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id="rexepunion"&gt;&lt;code&gt;Rexep.union&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;If you have an array of strings, you can automatically generate a regex that matches any the strings: regex = Regexp.union(array_of_strings)&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/510441137254195200"&gt;September 12, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id="convert-a-string-from-snakecase-to-camelcase"&gt;Convert a String from &lt;em&gt;snake_case&lt;/em&gt; to &lt;em&gt;CamelCase&lt;/em&gt;&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;You can camelize a string (some_string =&amp;gt; SomeString) with:&amp;#10;&amp;quot;some_string&amp;quot;.gsub(/(?:^|_)([a-z])/) do $1.upcase end&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/509330964246720512"&gt;September 9, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id="convert-a-string-from-camelcase-to-snakecase"&gt;Convert a String from &lt;em&gt;CamelCase&lt;/em&gt; to &lt;em&gt;snake_case&lt;/em&gt;&lt;/h2&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;You can snakify a string (SomeString =&amp;gt; some_string) with: &amp;#10;&amp;quot;SomeString&amp;quot;.gsub(/(?&amp;lt;!^)[A-Z]/) do &amp;quot;_#$&amp;amp;&amp;quot; end.downcase&lt;/p&gt;&amp;mdash; Ruby String Magic (@RubyStrings) &lt;a href="https://twitter.com/RubyStrings/status/508995693277904896"&gt;September 8, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://www.ruby-doc.org/core-2.2.2/String.html"&gt;RDoc: String&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/ruby/ruby/blob/trunk/string.c"&gt;Source: String&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/rubinius/rubinius/blob/master/kernel/common/string.rb"&gt;Rubinus Source: String&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Test Highlights</title>
    <link rel="alternate" href="http://idiosyncratic-ruby.com/1-test-highlights.html"/>
    <id>http://idiosyncratic-ruby.com/1-test-highlights.html</id>
    <published>2015-05-01T02:00:00+02:00</published>
    <updated>2015-05-01T02:00:00+02:00</updated>
    <author>
      <name>Jan Lelis</name>
    </author>
    <content type="html">&lt;p&gt;Compared to other languages, Ruby does not have very good tool support for development. This might not be a problem for many of us, in the end, humans create the code, and not tools.&lt;/p&gt;

&lt;p&gt;Nevertheless, it would be better to have better tools. Or at least valid syntax highlighting. The following table shows popular options for code highlighting, but none of them can manage to properly highlight more advanced Ruby features. Here is the:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="syntax-highlighter-comparison"&gt;Syntax Highlighter Comparison&lt;/h2&gt;

&lt;table class="table-35-30-X"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Editor or Syntax Highlighter&lt;/th&gt;
      &lt;th&gt;Version&lt;/th&gt;
      &lt;th&gt;Highlights Ruby Correctly?¹&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://github.com/rubychan/coderay"&gt;coderay&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1.1.0&lt;/td&gt;
      &lt;td&gt;no. score: 4/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://www.jetbrains.com/ruby/"&gt;ruby mine&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;7.1 RM-141.664&lt;/td&gt;
      &lt;td&gt;no. score: 4/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://github.com/jneen/rouge"&gt;rouge&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1.8.0&lt;/td&gt;
      &lt;td&gt;no. score: 3/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;24.3.1&lt;/td&gt;
      &lt;td&gt;no. score: 2/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="http://pygments.org/"&gt;pygments&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1.6&lt;/td&gt;
      &lt;td&gt;no. score: 2/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://wiki.gnome.org/Apps/Gedit"&gt;gedit&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;3.10.4&lt;/td&gt;
      &lt;td&gt;no. score: 1/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://github.com/PrismJS/prism"&gt;prism.js&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;0.0.1&lt;/td&gt;
      &lt;td&gt;no. score: 1/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://github.com/ccampbell/rainbow"&gt;rainbow.js&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1.1.9&lt;/td&gt;
      &lt;td&gt;no. score: 1/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://www.gnu.org/software/src-highlite/"&gt;src-highlight&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;3.1.6 (library: 4:0:0)&lt;/td&gt;
      &lt;td&gt;no. score: 1/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://github.com/syntaxhighlighter/syntaxhighlighter"&gt;syntaxhighlighter.js&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;3.0.83&lt;/td&gt;
      &lt;td&gt;no. score: 1/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="http://www.vim.org/"&gt;vim&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;7.4.52&lt;/td&gt;
      &lt;td&gt;no. score: 1/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://atom.io/"&gt;atom&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;0.192.0&lt;/td&gt;
      &lt;td&gt;no. score: 0/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://github.com/isagalaev/highlight.js"&gt;highlight.js&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;8.5&lt;/td&gt;
      &lt;td&gt;no. score: 0/5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href="https://www.sublimetext.com/"&gt;sublime text&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;3 Build 3083&lt;/td&gt;
      &lt;td&gt;no. score: 0/5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;¹ Obviously, passing the test does not necessarily mean that a tool highlights Ruby correctly - but it is an indication.&lt;/p&gt;

&lt;h2 id="the-idiosyncratic-ruby-syntax-highlight-test"&gt;The Idiosyncratic Ruby Syntax Highlight Test&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# # #
# For Reference
42
"String with #{ :interpolation }"
/regex$/
$/

# # #
# TEST CASE 1: Question Marks
# SHOULD BE HIGHLIGHTED AS: Array of Strings - Operator - String - Operator - String

[?', ?(] ?'a':'b'

# # #
# TEST CASE 2: Percent Format
# SHOULD BE HIGHLIGHTED AS: String - Operator - Array of Numbers

"%d %d %d"%[1,2,3]

# # #
# TEST CASE 3: Space-delimited String
# SHOULD BE HIGHLIGHTED AS: String Delimiter - String

% 5 #

# # #
# TEST CASE 4: Multi-line Regex with Global Variable Interpolation
# SHOULD BE HIGHLIGHTED AS: Regex Delimiter - Regex -
#                           Interpolation Character (Optional) -
#                           Global Variable -
#                           Regex Delimiter - Regex Options

/
$$#$/
/omix

# # #
# TEST CASE 5: Nested Heredoc
# SHOULD BE HIGHLIGHTED AS: Method - String Delimiter - Operator -
#                           String Delimiter - String - String Delimiter
#                           String - String Delimiter

puts &amp;lt;&amp;lt;HERE&amp;lt;&amp;lt;&amp;lt;&amp;lt;THERE
foo 42
HERE
bla 43
THERE
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
